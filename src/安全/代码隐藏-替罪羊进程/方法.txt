1.自己的项目在编写的时候设置一个宏，调试阶段编译出来的是exe程序。release的时候编译出来的是dll程序。
为什么要编译出dll程序呢？因为我们要利用dll具有重定位表的这个特点，因为exe默认是不生成重定位表的。
当我们的代码patch到目标进程后，就需要进行重定位修复，如果exe没有重定位表就无法进行重定位修复，
就会出现crash。

2.编译出来dll后还需要一个loader，loader负责以挂起状态创建一个替罪羊进程，例如：explorer.exe或者notepad.exe，
然后将我们的dll代码经过重定位修复后patch到目标进程即可。

起始输入表的处理和重定位表修复可以全部由loader来帮忙去做，也可以由dll自己来处理。
让loader去做的好处是，dll的编写变得简单了，只需要专心设计软件即可。

3.扫描到可疑代码时报的也只是替罪羊进程，也不是没有办法获取真实的样本。例如驱动获取进程创建的父子关系列表，
如果检测出了替罪羊进程，那么就可以向上找到其父进程(或者更高层)来分析。

