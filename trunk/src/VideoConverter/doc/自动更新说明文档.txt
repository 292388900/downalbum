
自动更新是使用了firefox比较成熟的更新方案制作的。

首先在客户端会记录一个当前的客户端版本信息，
然后客户端在每次启动的时候，会去连接服务器，然后读取服务器上的update.txt
文件，文件中具有各种更新配置信息。

客户端在下载了配置信息后，如果有更新文件，那么便在后台默默下载，（用户选择禁止更新除外）
下载好了之后，提示用户是否安装（立即安装，下次启动时安装，放弃）

立即安装。关闭程序，启动update.exe
下次启动安装。写入需要安装的文件到xml文件，程序会在下次启动的是时候判断是否有更新文件，有则更新
放弃。则是删除此次更新包。




一个典型的放置在服务器上的update.txt如下：

=====================================================================
; 当前包信息
; Importance 表示这个包的重要程度，目前分三等，低(0),中(1),高(2)
[UpdateInfo]
LatestVersion = 1.0.0.5
MinVersion = 1.0.0.1
BuildDate = 20090601
Importance = 2

; 更新说明信息，客户端根据不同的语言再判断吧
[Describe]
zh-cn = 1.更新了xxx\n 2.更新了xxx \n 3. 修正了xxx
us = 1.update the xxx \n 2.update the xxx

; 完全包信息，完全包是一个exe安装包
[FullSetup]
MD5 = 6fbb2858f0dbfd23123be29e8423939e
URI = complete.exe.zip

; 部分更新包位置，部分更新包是一个mar文件
; 通常使用MarTool生成
[Partial]
MD5 = b1f8a5a28709cf09070767f890704768
URI = partial.mar.zip
=====================================================================


如果当前客户端版本号 < LatestVersion 的时候就会去更新
如果介于 MinVersion 和 LatestVersion 之间，那么就去更新[Partial]节
否则更新[FullSetup]

=====================================================================
如何生成[Partial]
首先将最新版本和MinVersion版本作比较。譬如最新1.0.0.5和MinVersion。
这样会生成一个文件改动列表

譬如 1.0.0.5版本多添加了 xx 文件，删除了 xx 文件。
（由于支持跨版本升级，所以修改的文件一律算添加文件）

然后将添加的文件压缩成bz2，最后将这些添加的文件制作成mar包文件。放置在服务器上即可。
由于iis限制后缀名，所以后缀名须修改成complete.mar.zip。客户端自行删除.zip即可

然后update.exe负责将complete解压缩并且替换当前目录文件。

=====================================================================
如何生成[FullSetup]
完成包比较好制作，将最新的资源放在一起，然后利用NSIS已经制作好的脚本将其打包即可。


=====================================================================
关于辅助工具MarTool
这个就是做[Partial]包的工具，主要用到了libbz2和libmar库。
具体的代码可以更新查看。





